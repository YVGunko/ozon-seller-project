export class OzonApiService {
  constructor(apiKey, clientId) {
    // üî• –Ø–í–ù–û –£–ö–ê–ó–´–í–ê–ï–ú, —á—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if (typeof window === 'undefined') {
      // –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Å—Ä–µ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
      if (!apiKey || !clientId) {
        throw new Error('OZON API credentials are required for server-side usage.');
      }
      this.apiKey = apiKey;
      this.clientId = clientId;
    } else {
      // –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Ä–µ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É —Å localStorage
      const config = this.getCurrentConfig();

      if (!config.clientId || !config.apiKey) {
        throw new Error('OZON API credentials are required. Please add a profile in settings.');
      }

      this.apiKey = config.apiKey;
      this.clientId = config.clientId;
    }

    this.baseURL = 'https://api-seller.ozon.ru';
  }

  getCurrentConfig() {
    if (typeof window === 'undefined') {
      // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      return { clientId: '', apiKey: '' };
    }

    const currentProfile = JSON.parse(localStorage.getItem('currentOzonProfile') || 'null');
    if (currentProfile) {
      return {
        clientId: currentProfile.ozon_client_id,
        apiKey: currentProfile.ozon_api_key
      };
    }

    // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è fallback)
    return {
      clientId: process.env.NEXT_PUBLIC_OZON_CLIENT_ID || '',
      apiKey: process.env.NEXT_PUBLIC_OZON_API_KEY || ''
    };
  }

  async makeRequest(endpoint, body = {}) {
    console.log(`üîÑ Making request to: ${endpoint}`);
    console.log('üì¶ Request body:', JSON.stringify(body, null, 2));

    try {
      const response = await fetch(`${this.baseURL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Client-Id': this.clientId,
          'Api-Key': this.apiKey,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      });

      console.log(`üìä Response status: ${response.status}`);

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå API Error ${response.status}:`, errorText);
        throw new Error(`OZON API Error: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Request successful');
      return data;
    } catch (error) {
      console.error('‚ùå Fetch error:', error.message);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
  async getOrders() {
    return this.makeRequest('/v2/order/list', {
      filter: {},
      limit: 10,
      sort_by: 'created_at',
      sort_order: 'desc'
    });
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  async getProducts(options = {}) {
    const body = {
      filter: {
        offer_id: options.filter?.offer_id || [], // Should be an array
        product_id: options.filter?.product_ids || [],
        visibility: options.filter?.visibility || "ALL"
      },
      last_id: options.last_id || "",
      limit: options.limit || 100
    };
    console.log('Sending request body to OZON:', JSON.stringify(body, null, 2));
    return this.makeRequest('/v3/product/list', body);
  }

  async getProductAttributes(offerId) {
    const body = {
      filter: {
        offer_id: [offerId] // –ú–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º offer_id
      },
      limit: 1
    };

    console.log('üìã Fetching attributes for offer:', offerId);
    return this.makeRequest('/v4/product/info/attributes', body);
  }

  async copyProduct(sourceOfferId, newOfferId, modifications = {}) {
    console.log(`üìã Copying product from ${sourceOfferId} to ${newOfferId}`);

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const sourceAttributes = await this.getProductAttributes(sourceOfferId);

      if (!sourceAttributes.result || sourceAttributes.result.length === 0) {
        throw new Error('Source product not found');
      }

      const sourceProduct = sourceAttributes.result[0];

      // 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const newProductData = this.prepareProductData(sourceProduct, newOfferId, modifications);

      // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
      return await this.createProduct(newProductData);
    } catch (error) {
      console.error('Error copying product:', error);
      throw error;
    }
  }

  async createProduct(productData) {
    const body = {
      items: [productData]
    };

    console.log('üÜï Creating new product:', JSON.stringify(body, null, 2));
    return this.makeRequest('/v3/product/import', body);
  }

  prepareProductData(sourceProduct, newOfferId, modifications) {
    // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const newProduct = {
      offer_id: newOfferId,
      name: modifications.name || sourceProduct.name,
      category_id: sourceProduct.description_category_id,
      price: modifications.price || "0",
      old_price: modifications.old_price || "0",
      premium_price: modifications.premium_price || "0",
      vat: "0"
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
    if (sourceProduct.attributes) {
      newProduct.attributes = this.processAttributes(
        sourceProduct.attributes,
        modifications
      );
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (sourceProduct.images && sourceProduct.images.length > 0) {
      newProduct.images = sourceProduct.images.map((image, index) => ({
        file_name: image,
        default: index === 0
      }));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –≤–µ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (sourceProduct.depth) newProduct.depth = sourceProduct.depth;
    if (sourceProduct.height) newProduct.height = sourceProduct.height;
    if (sourceProduct.width) newProduct.width = sourceProduct.width;
    if (sourceProduct.weight) newProduct.weight = sourceProduct.weight;
    if (sourceProduct.dimension_unit) newProduct.dimension_unit = sourceProduct.dimension_unit;
    if (sourceProduct.weight_unit) newProduct.weight_unit = sourceProduct.weight_unit;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    Object.keys(modifications).forEach(key => {
      if (!['name', 'price', 'old_price', 'premium_price'].includes(key)) {
        newProduct[key] = modifications[key];
      }
    });

    return newProduct;
  }

  processAttributes(attributes, modifications) {
    return attributes.map(attr => {
      const attributeCopy = { ...attr };

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–∞–º
      if (modifications.color && this.isColorAttribute(attr)) {
        attributeCopy.values = [{ value: modifications.color }];
      }

      if (modifications.description && this.isDescriptionAttribute(attr)) {
        attributeCopy.values = [{ value: modifications.description }];
      }

      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

      return attributeCopy;
    });
  }

  isColorAttribute(attr) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ç—Ä–∏–±—É—Ç —Ü–≤–µ—Ç–æ–º (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤)
    const colorKeywords = ['color', '—Ü–≤–µ—Ç', 'colore', 'farbe'];
    return colorKeywords.some(keyword =>
      attr.id.toString().toLowerCase().includes(keyword) ||
      (attr.values && attr.values.some(v =>
        v.value && v.value.toLowerCase().includes(keyword)
      ))
    );
  }

  isDescriptionAttribute(attr) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ç—Ä–∏–±—É—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º
    const descriptionKeywords = ['description', '–æ–ø–∏—Å–∞–Ω–∏–µ', 'beschreibung'];
    return descriptionKeywords.some(keyword =>
      attr.id.toString().toLowerCase().includes(keyword)
    );
  }
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  // –í –º–µ—Ç–æ–¥–µ, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ /v3/product/list
  async getSimpleProducts(limit) {
    try {
      const url = `${this.baseURL}/v3/product/list`;
      const body = {
        filter: {
          offer_id: [],
          product_id: [],
          visibility: "ALL"
        },
        last_id: "",
        limit: limit
      };

      console.log('üöÄ Sending request to OZON API...');

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Client-Id': this.clientId,
          'Api-Key': this.apiKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      const responseText = await response.text();

      if (!response.ok) {
        throw new Error(`OZON API error: ${response.status} - ${responseText}`);
      }

      // –ü–∞—Ä—Å–∏–º JSON
      const data = JSON.parse(responseText);

      if (data.result && data.result.items && Array.isArray(data.result.items)) {
        console.log(`‚úÖ Extracted ${data.result.items.length} products from result.items`);
        return data.result.items; // <- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      } else {
        console.warn('‚ö†Ô∏è Unexpected response structure, returning empty array');
        return [];
      }

    } catch (error) {
      console.error('‚ùå OZON API request failed:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  async createProductsBatch(products) {
    const body = {
      items: products
    };

    console.log('üÜï Creating products batch:', JSON.stringify(body, null, 2));
    return this.makeRequest('/v2/product/import', body);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  async createProduct(productData) {
    const body = {
      items: [productData]
    };

    console.log('üÜï Creating product:', JSON.stringify(body, null, 2));
    return this.makeRequest('/v2/product/import', body);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
  prepareProductFromTemplate(baseData, excelRow, fieldMappings) {
    const product = {
      offer_id: this.generateFieldValue('offer_id', baseData, excelRow, fieldMappings),
      name: this.generateFieldValue('name', baseData, excelRow, fieldMappings),
      category_id: baseData.category_id,
      price: baseData.price || "0",
      old_price: baseData.old_price || "0",
      vat: baseData.vat || "0",
      attributes: []
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ fieldMappings
    Object.keys(fieldMappings).forEach(fieldKey => {
      const mapping = fieldMappings[fieldKey];
      if (mapping.attributeId && mapping.enabled) {
        const value = this.generateFieldValue(fieldKey, baseData, excelRow, fieldMappings);
        if (value) {
          product.attributes.push({
            id: mapping.attributeId,
            value: value
          });
        }
      }
    });

    return product;
  }

  // –í –∫–ª–∞—Å—Å–µ OzonApiService, –¥–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–∫—É
  generateFieldValue(fieldKey, baseData, row, fieldMappings) {
    const config = fieldMappings[fieldKey];
    if (!config || !config.enabled) return '';

    let value = config.template;

    console.log(`Processing field: ${fieldKey}, template: ${value}`);
    console.log('Available row fields:', Object.keys(row));
    console.log('Available baseData fields:', Object.keys(baseData));

    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    value = value.replace(/{(\w+)}/g, (match, placeholder) => {
      let replacement = '';

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ Excel
      if (placeholder in row) {
        replacement = row[placeholder] || '';
      }
      // –ó–∞—Ç–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
      else if (placeholder in baseData) {
        replacement = baseData[placeholder] || '';
      }

      console.log(`Replacing {${placeholder}} with: "${replacement}"`);
      return replacement;
    });

    console.log(`Final value for ${fieldKey}: ${value}`);
    return value;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
  async parseExcelFile(file) {
    const ExcelJS = require('exceljs');
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.load(file); // 'file' should be a Buffer

    const worksheet = workbook.worksheets[0]; // Get first sheet
    const jsonData = [];

    // Process rows. Note: ExcelJS rows are 1-indexed.
    worksheet.eachRow((row, rowNumber) => {
      if (rowNumber === 1) return; // Skip header row if your file has one

      // Access cell values by column number (1-indexed)
      const processedRow = {
        index: rowNumber - 1, // Adjust for zero-based index
        colourCode: row.getCell(2).value?.toString(), // Assuming Colour Code is col A
        colourName: row.getCell(3).value?.toString(), // Assuming Colour Name is col B
        carBrand: row.getCell(5).value?.toString(),   // Assuming Car Brand is col C
        rawData: row.values // Gets all values as an array
      };

      // Only push rows that have data
      if (processedRow.colourCode) {
        jsonData.push(processedRow);
      }
    });

    return jsonData;
  }

  findColumnValue(row, possibleColumnNames) {
    for (const colName of possibleColumnNames) {
      if (row[colName] !== undefined) {
        return row[colName];
      }
    }
    return '';
  }
}